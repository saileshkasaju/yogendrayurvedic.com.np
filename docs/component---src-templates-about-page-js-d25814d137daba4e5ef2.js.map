{"version":3,"file":"component---src-templates-about-page-js-d25814d137daba4e5ef2.js","mappings":"2LAGaA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OACzB,uBAAKA,UAAWA,EAAWC,wBAAyB,CAAEC,OAAQH,MAchE,IAXgB,SAAC,GAAD,IAAGA,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OACd,uBAAKA,UAAWA,GAAYD,K,uDCI9B,SAASI,EAAT,GAAyD,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACtCC,GAASC,EAAAA,EAAAA,IAAe,aAAxBD,KAeFE,EAAkBP,GAAeK,EAAKG,aAAaR,YAEnDS,EAASJ,EAAKG,aAAaE,QAC3BC,EAAO,GAAMF,GAASN,GAAS,qBAErC,OACE,gBAAC,IAAD,CACES,eAAgB,CAEdR,KAAAA,GAEFF,MAAOA,EACPW,cAAa,QAAUR,EAAKG,aAAaN,MACzCD,KAAM,CACJ,CACEa,KAAK,cACLnB,QAASY,GAEX,CACEO,KAAM,cACNnB,QAAS,WAEX,CACEoB,SAAS,WACTpB,QAASO,GAEX,CACEa,SAAU,UACVpB,QAAS,qBAEX,CACEoB,SAAS,iBACTpB,QAASY,GAEX,CACEQ,SAAS,WACTpB,QAASgB,GAEX,CACEI,SAAS,UACTpB,QAAQ,WAEV,CACEmB,KAAK,eACLnB,QAAQ,uBAEV,CACEmB,KAAK,oBACLnB,QAASgB,GAEX,CACEG,KAAK,kBACLnB,QAASU,EAAKG,aAAaQ,QAE7B,CACEF,KAAK,gBACLnB,QAASO,GAEX,CACEY,KAAK,sBACLnB,QAASY,IAEXU,OAAOhB,IACT,wBAAMiB,IAAI,mBAAmBC,MAAM,UAAUC,KAASX,EAAL,8BACjD,wBAAMS,IAAI,OAAOG,KAAK,YAAYD,KAASX,EAAL,yBAAqCU,MAAM,UACjF,wBAAMD,IAAI,OAAOG,KAAK,YAAYD,KAASX,EAAL,yBAAqCU,MAAM,UACjF,wBAAMD,IAAI,YAAYE,KAASX,EAAL,6BAAyCa,MAAM,aAK/EvB,EAAIwB,aAAe,CACjBnB,KAAK,KACLH,KAAM,GACND,YAAY,IAUd,O,wHCzGawB,EAAoB,SAAC,GAA0C,IAAxCtB,EAAuC,EAAvCA,MAAOP,EAAgC,EAAhCA,QACnC8B,EADmE,EAAvBC,kBACVC,EAAAA,EAExC,OACE,2BAAS/B,UAAU,6BACjB,uBAAKA,UAAU,aACb,uBAAKA,UAAU,WACb,uBAAKA,UAAU,4BACb,uBAAKA,UAAU,WACb,sBAAIA,UAAU,sDAAsDM,GACpE,gBAACuB,EAAD,CAAa7B,UAAU,UAAUD,QAASA,UAkCxD,UAnBkB,SAAC,GAAc,IACPiC,EADM,EAAXC,KACXC,eAER,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAK5B,MAAO0B,EAAKG,YAAY7B,QAC7B,gBAACsB,EAAD,CACEE,iBAAkBhC,EAAAA,EAClBQ,MAAO0B,EAAKG,YAAY7B,MACxBP,QAASiC,EAAKI","sources":["webpack://gatsby-starter-netlify-cms/./src/components/Content.js","webpack://gatsby-starter-netlify-cms/./src/components/seo.js","webpack://gatsby-starter-netlify-cms/./src/templates/about-page.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, meta, title, image, lang }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  // const webURL = withPrefix('/');\n  const webURL = site.siteMetadata.siteUrl;\n  const ogImage = `${webURL}${image || '/img/og-image.jpg'}`;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        // fix html lang attribute\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: 'theme-color',\n          content: '#58B856',\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: 'og:type',\n          content: 'business.business',\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:image`,\n          content: ogImage,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:image:src`,\n          content: ogImage,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}>\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={`${webURL}/img/apple-touch-icon.png`} />\n      <link rel=\"icon\" type=\"image/png\" href={`${webURL}/img/favicon-32x32.png`} sizes=\"32x32\" />\n      <link rel=\"icon\" type=\"image/png\" href={`${webURL}/img/favicon-16x16.png`} sizes=\"16x16\" />\n      <link rel=\"mask-icon\" href={`${webURL}/img/safari-pinned-tab.svg`} color=\"#ff4400\" />\n    </Helmet>\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Content, { HTMLContent } from '../components/Content';\nimport SEO from '../components/seo';\n\nexport const AboutPageTemplate = ({ title, content, contentComponent }) => {\n  const PageContent = contentComponent || Content;\n\n  return (\n    <section className=\"section section--gradient\">\n      <div className=\"container\">\n        <div className=\"columns\">\n          <div className=\"column is-10 is-offset-1\">\n            <div className=\"section\">\n              <h2 className=\"title is-size-3 has-text-weight-bold is-bold-light\">{title}</h2>\n              <PageContent className=\"content\" content={content} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nAboutPageTemplate.propTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  contentComponent: PropTypes.func,\n};\n\nconst AboutPage = ({ data }) => {\n  const { markdownRemark: post } = data;\n\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <AboutPageTemplate\n        contentComponent={HTMLContent}\n        title={post.frontmatter.title}\n        content={post.html}\n      />\n    </Layout>\n  );\n};\n\nAboutPage.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default AboutPage;\n\nexport const aboutPageQuery = graphql`\n  query AboutPage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["HTMLContent","content","className","dangerouslySetInnerHTML","__html","SEO","description","meta","title","image","lang","site","useStaticQuery","metaDescription","siteMetadata","webURL","siteUrl","ogImage","htmlAttributes","titleTemplate","name","property","author","concat","rel","sizes","href","type","color","defaultProps","AboutPageTemplate","PageContent","contentComponent","Content","post","data","markdownRemark","frontmatter","html"],"sourceRoot":""}