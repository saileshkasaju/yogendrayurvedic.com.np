{"version":3,"file":"component---src-templates-tags-js-4d00ac243d7a5492515e.js","mappings":"+KAYA,SAASA,EAAT,GAAyD,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACtCC,GAASC,EAAAA,EAAAA,IAAe,aAAxBD,KAeFE,EAAkBP,GAAeK,EAAKG,aAAaR,YAEnDS,EAASJ,EAAKG,aAAaE,QAC3BC,EAAO,GAAMF,GAASN,GAAS,qBAErC,OACE,gBAAC,IAAD,CACES,eAAgB,CAEdR,KAAAA,GAEFF,MAAOA,EACPW,cAAa,QAAUR,EAAKG,aAAaN,MACzCD,KAAM,CACJ,CACEa,KAAK,cACLC,QAASR,GAEX,CACEO,KAAM,cACNC,QAAS,WAEX,CACEC,SAAS,WACTD,QAASb,GAEX,CACEc,SAAU,UACVD,QAAS,qBAEX,CACEC,SAAS,iBACTD,QAASR,GAEX,CACES,SAAS,WACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,oBACLC,QAASJ,GAEX,CACEG,KAAK,kBACLC,QAASV,EAAKG,aAAaS,QAE7B,CACEH,KAAK,gBACLC,QAASb,GAEX,CACEY,KAAK,sBACLC,QAASR,IAEXW,OAAOjB,IACT,wBAAMkB,IAAI,mBAAmBC,MAAM,UAAUC,KAASZ,EAAL,8BACjD,wBAAMU,IAAI,OAAOG,KAAK,YAAYD,KAASZ,EAAL,yBAAqCW,MAAM,UACjF,wBAAMD,IAAI,OAAOG,KAAK,YAAYD,KAASZ,EAAL,yBAAqCW,MAAM,UACjF,wBAAMD,IAAI,YAAYE,KAASZ,EAAL,6BAAyCc,MAAM,aAK/ExB,EAAIyB,aAAe,CACjBpB,KAAK,KACLH,KAAM,GACND,YAAY,IAUd,O,kFC3GMyB,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAiCH,OAjCGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACJC,OAAA,WACE,IACMC,EADQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MACxBC,KAAI,SAAAC,GAAI,OAC9B,sBAAIC,IAAKD,EAAKE,KAAKC,OAAOC,MACxB,gBAAC,KAAD,CAAMC,GAAIL,EAAKE,KAAKC,OAAOC,MACzB,sBAAIE,UAAU,aAAaN,EAAKE,KAAKK,YAAYvC,YAIjDwC,EAAMd,KAAKC,MAAMc,YAAYD,IAC7BxC,EAAQ0B,KAAKC,MAAMC,KAAKzB,KAAKG,aAAaN,MAC1C0C,EAAahB,KAAKC,MAAMC,KAAKC,kBAAkBa,WAC/CC,EAAeD,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,iBAAoEF,EAApE,IAEf,OACE,gBAAC,IAAD,KACE,2BAASF,UAAU,WACjB,gBAAC,IAAD,CAAKtC,MAAUwC,EAAL,MAAcxC,IACxB,uBAAKsC,UAAU,qBACb,uBAAKA,UAAU,WACb,uBAAKA,UAAU,2BAA2BM,MAAO,CAAEC,aAAc,SAC/D,sBAAIP,UAAU,iCAAiCK,GAC/C,sBAAIL,UAAU,WAAWb,GACzB,yBACE,gBAAC,KAAD,CAAMY,GAAG,UAAT,0BAQf,EAjCGd,CAAiBuB,EAAAA,WAoCvB","sources":["webpack://gatsby-starter-netlify-cms/./src/components/seo.js","webpack://gatsby-starter-netlify-cms/./src/templates/tags.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, meta, title, image, lang }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  // const webURL = withPrefix('/');\n  const webURL = site.siteMetadata.siteUrl;\n  const ogImage = `${webURL}${image || '/img/og-image.jpg'}`;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        // fix html lang attribute\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: 'theme-color',\n          content: '#58B856',\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: 'og:type',\n          content: 'business.business',\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:image`,\n          content: ogImage,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:image:src`,\n          content: ogImage,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}>\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={`${webURL}/img/apple-touch-icon.png`} />\n      <link rel=\"icon\" type=\"image/png\" href={`${webURL}/img/favicon-32x32.png`} sizes=\"32x32\" />\n      <link rel=\"icon\" type=\"image/png\" href={`${webURL}/img/favicon-16x16.png`} sizes=\"16x16\" />\n      <link rel=\"mask-icon\" href={`${webURL}/img/safari-pinned-tab.svg`} color=\"#ff4400\" />\n    </Helmet>\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\n\nclass TagRoute extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges;\n    const postLinks = posts.map(post => (\n      <li key={post.node.fields.slug}>\n        <Link to={post.node.fields.slug}>\n          <h2 className=\"is-size-2\">{post.node.frontmatter.title}</h2>\n        </Link>\n      </li>\n    ));\n    const tag = this.props.pageContext.tag;\n    const title = this.props.data.site.siteMetadata.title;\n    const totalCount = this.props.data.allMarkdownRemark.totalCount;\n    const tagHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} tagged with “${tag}”`;\n\n    return (\n      <Layout>\n        <section className=\"section\">\n          <SEO title={`${tag} | ${title}`} />\n          <div className=\"container content\">\n            <div className=\"columns\">\n              <div className=\"column is-10 is-offset-1\" style={{ marginBottom: '6rem' }}>\n                <h3 className=\"title is-size-4 is-bold-light\">{tagHeader}</h3>\n                <ul className=\"taglist\">{postLinks}</ul>\n                <p>\n                  <Link to=\"/tags/\">Browse all tags</Link>\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    );\n  }\n}\n\nexport default TagRoute;\n\nexport const tagPageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["SEO","description","meta","title","image","lang","site","useStaticQuery","metaDescription","siteMetadata","webURL","siteUrl","ogImage","htmlAttributes","titleTemplate","name","content","property","author","concat","rel","sizes","href","type","color","defaultProps","TagRoute","render","postLinks","this","props","data","allMarkdownRemark","edges","map","post","key","node","fields","slug","to","className","frontmatter","tag","pageContext","totalCount","tagHeader","style","marginBottom","React"],"sourceRoot":""}